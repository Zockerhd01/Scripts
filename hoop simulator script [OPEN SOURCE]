local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local cooldown = nil
local rings = workspace.Game.Rings

local Window = Rayfield:CreateWindow({
   Name = "Hoop Simulator",
   LoadingTitle = "Hoop Simulator",
   LoadingSubtitle = "by 1234567#3209",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Big Hub"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Tab = Window:CreateTab("Game", 4483362458) -- Title, Image

local Section = Tab:CreateSection("Auto Farm")

local Slider = Tab:CreateSlider({
   Name = "Cooldown for AutoFarm",
   Range = {1, 100},
   Increment = 1,
   Suffix = "Seconds",
   CurrentValue = 5,
   Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Slider1)
        cooldown = Slider1
   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Farm",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Toogle1)
        _G.autofarm = Toogle1
        while _G.autofarm == true do
            game:GetService("ReplicatedStorage"):WaitForChild("events-shared/core/events.module@GlobalEvents"):WaitForChild("throwBall"):FireServer(1)
        wait(cooldown)
        end

   end,
})

local Toggle = Tab:CreateToggle({
   Name = "Auto Rings (AutoFarm needs to be on)",
   CurrentValue = false,
   Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Toogle2)

        _G.ring = Toogle2
        while _G.ring == true do
            for i,v in pairs(rings:GetChildren()) do
                if v:IsA("Model") then
                    game:GetService("ReplicatedStorage"):WaitForChild("events-shared/core/events.module@GlobalEvents"):WaitForChild("ringHit"):FireServer(v.Name)
                    v:Destroy()
                end
            end
        wait(0.1)
        end

   end,
})
